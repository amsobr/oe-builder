#!/bin/bash

# change version to trigger a rebuild. Changes to source files are not picked
# up automatically. This was intentional. It may change in the future
VERSION=%%VERSION%%
IMAGE_NAME=oe-builder
ALL_RELEASES="morty kirkstone scarthgap"
SRC_DIR=$(pwd)
BUILD_DIR=$(pwd)/build
declare -A BASE_IMAGE
BASE_IMAGE_morty=ubuntu:16.04
BASE_IMAGE_kirkstone=ubuntu:22.04
BASE_IMAGE_scarthgap=ubuntu:24.04

for RELEASE in ${ALL_RELEASES}; do
    RELEASE_BUILDDIR=${BUILD_DIR}/${RELEASE}-${VERSION}
    DOCKER_IMAGE_NAME=oe-builder-${RELEASE}
    echo "Configuring ${RELEASE_BUILDDIR}..."
    # Lets make sure we start from scratch...
    rm -rf ${RELEASE_BUILDDIR} >/dev/null 2>&1
    mkdir -p ${RELEASE_BUILDDIR}
    IMG=$(eval "echo \$BASE_IMAGE_${RELEASE}")
    DOCKER_FILE="Dockerfile.${RELEASE}.in"
    cp ${DOCKER_FILE} ${RELEASE_BUILDDIR}/Dockerfile
    sed -e "s/@@RELEASE@@/${RELEASE}/g" \
        bashrc.sh.in > ${RELEASE_BUILDDIR}/bashrc.sh
    cp entry-point.sh ${RELEASE_BUILDDIR}/entry-point.sh

    cd ${RELEASE_BUILDDIR}
    echo "Building from ${RELEASE_BUILDDIR}..."
    docker build --no-cache \
        --tag ${DOCKER_IMAGE_NAME}:${VERSION} \
        .
    cd ${SRC_DIR}
done
